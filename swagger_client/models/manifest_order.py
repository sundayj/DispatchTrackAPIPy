# coding: utf-8

"""
    DispatchTrack API

    # Authentication The authentication for this API is done via Oauth2 Access Token: - **GetTokenAuth**   You can find the client ID and secret in your application's Admin - Oauth2 Settings tab.   These are then passed via Basic Auth in the request to server's /oauth2/token endpoint to get the access token.   - **Auth**   With the Oauth2 Access Token received from /oauth2/token request, API requests for remaining API endpoints can be made.   It has to be sent as an Authorization Bearer header in the request.   If an invalid or expired access token is used, API will send back a 401 status.     # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ManifestOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_number': 'str',
        'service_unit_name': 'str',
        'route_tag': 'str',
        'customer_code': 'str',
        'customer_name': 'str',
        'driver_name': 'str',
        'truck_number': 'str',
        'schedule_date': 'str',
        'schedule_start_time': 'str',
        'schedule_end_time': 'str',
        'stop_number': 'float',
        'account_name': 'str',
        'route_distance': 'float',
        'service_duration': 'float'
    }

    attribute_map = {
        'order_number': 'order_number',
        'service_unit_name': 'service_unit_name',
        'route_tag': 'route_tag',
        'customer_code': 'customer_code',
        'customer_name': 'customer_name',
        'driver_name': 'driver_name',
        'truck_number': 'truck_number',
        'schedule_date': 'schedule_date',
        'schedule_start_time': 'schedule_start_time',
        'schedule_end_time': 'schedule_end_time',
        'stop_number': 'stop_number',
        'account_name': 'account_name',
        'route_distance': 'route_distance',
        'service_duration': 'service_duration'
    }

    def __init__(self, order_number=None, service_unit_name=None, route_tag=None, customer_code=None, customer_name=None, driver_name=None, truck_number=None, schedule_date=None, schedule_start_time=None, schedule_end_time=None, stop_number=None, account_name=None, route_distance=None, service_duration=None):  # noqa: E501
        """ManifestOrder - a model defined in Swagger"""  # noqa: E501
        self._order_number = None
        self._service_unit_name = None
        self._route_tag = None
        self._customer_code = None
        self._customer_name = None
        self._driver_name = None
        self._truck_number = None
        self._schedule_date = None
        self._schedule_start_time = None
        self._schedule_end_time = None
        self._stop_number = None
        self._account_name = None
        self._route_distance = None
        self._service_duration = None
        self.discriminator = None
        if order_number is not None:
            self.order_number = order_number
        if service_unit_name is not None:
            self.service_unit_name = service_unit_name
        if route_tag is not None:
            self.route_tag = route_tag
        if customer_code is not None:
            self.customer_code = customer_code
        if customer_name is not None:
            self.customer_name = customer_name
        if driver_name is not None:
            self.driver_name = driver_name
        if truck_number is not None:
            self.truck_number = truck_number
        if schedule_date is not None:
            self.schedule_date = schedule_date
        if schedule_start_time is not None:
            self.schedule_start_time = schedule_start_time
        if schedule_end_time is not None:
            self.schedule_end_time = schedule_end_time
        if stop_number is not None:
            self.stop_number = stop_number
        if account_name is not None:
            self.account_name = account_name
        if route_distance is not None:
            self.route_distance = route_distance
        if service_duration is not None:
            self.service_duration = service_duration

    @property
    def order_number(self):
        """Gets the order_number of this ManifestOrder.  # noqa: E501


        :return: The order_number of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ManifestOrder.


        :param order_number: The order_number of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def service_unit_name(self):
        """Gets the service_unit_name of this ManifestOrder.  # noqa: E501


        :return: The service_unit_name of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._service_unit_name

    @service_unit_name.setter
    def service_unit_name(self, service_unit_name):
        """Sets the service_unit_name of this ManifestOrder.


        :param service_unit_name: The service_unit_name of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._service_unit_name = service_unit_name

    @property
    def route_tag(self):
        """Gets the route_tag of this ManifestOrder.  # noqa: E501


        :return: The route_tag of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._route_tag

    @route_tag.setter
    def route_tag(self, route_tag):
        """Sets the route_tag of this ManifestOrder.


        :param route_tag: The route_tag of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._route_tag = route_tag

    @property
    def customer_code(self):
        """Gets the customer_code of this ManifestOrder.  # noqa: E501


        :return: The customer_code of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._customer_code

    @customer_code.setter
    def customer_code(self, customer_code):
        """Sets the customer_code of this ManifestOrder.


        :param customer_code: The customer_code of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._customer_code = customer_code

    @property
    def customer_name(self):
        """Gets the customer_name of this ManifestOrder.  # noqa: E501


        :return: The customer_name of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this ManifestOrder.


        :param customer_name: The customer_name of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def driver_name(self):
        """Gets the driver_name of this ManifestOrder.  # noqa: E501


        :return: The driver_name of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this ManifestOrder.


        :param driver_name: The driver_name of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._driver_name = driver_name

    @property
    def truck_number(self):
        """Gets the truck_number of this ManifestOrder.  # noqa: E501


        :return: The truck_number of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._truck_number

    @truck_number.setter
    def truck_number(self, truck_number):
        """Sets the truck_number of this ManifestOrder.


        :param truck_number: The truck_number of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._truck_number = truck_number

    @property
    def schedule_date(self):
        """Gets the schedule_date of this ManifestOrder.  # noqa: E501


        :return: The schedule_date of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._schedule_date

    @schedule_date.setter
    def schedule_date(self, schedule_date):
        """Sets the schedule_date of this ManifestOrder.


        :param schedule_date: The schedule_date of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._schedule_date = schedule_date

    @property
    def schedule_start_time(self):
        """Gets the schedule_start_time of this ManifestOrder.  # noqa: E501


        :return: The schedule_start_time of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._schedule_start_time

    @schedule_start_time.setter
    def schedule_start_time(self, schedule_start_time):
        """Sets the schedule_start_time of this ManifestOrder.


        :param schedule_start_time: The schedule_start_time of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._schedule_start_time = schedule_start_time

    @property
    def schedule_end_time(self):
        """Gets the schedule_end_time of this ManifestOrder.  # noqa: E501


        :return: The schedule_end_time of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._schedule_end_time

    @schedule_end_time.setter
    def schedule_end_time(self, schedule_end_time):
        """Sets the schedule_end_time of this ManifestOrder.


        :param schedule_end_time: The schedule_end_time of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._schedule_end_time = schedule_end_time

    @property
    def stop_number(self):
        """Gets the stop_number of this ManifestOrder.  # noqa: E501


        :return: The stop_number of this ManifestOrder.  # noqa: E501
        :rtype: float
        """
        return self._stop_number

    @stop_number.setter
    def stop_number(self, stop_number):
        """Sets the stop_number of this ManifestOrder.


        :param stop_number: The stop_number of this ManifestOrder.  # noqa: E501
        :type: float
        """

        self._stop_number = stop_number

    @property
    def account_name(self):
        """Gets the account_name of this ManifestOrder.  # noqa: E501


        :return: The account_name of this ManifestOrder.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ManifestOrder.


        :param account_name: The account_name of this ManifestOrder.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def route_distance(self):
        """Gets the route_distance of this ManifestOrder.  # noqa: E501


        :return: The route_distance of this ManifestOrder.  # noqa: E501
        :rtype: float
        """
        return self._route_distance

    @route_distance.setter
    def route_distance(self, route_distance):
        """Sets the route_distance of this ManifestOrder.


        :param route_distance: The route_distance of this ManifestOrder.  # noqa: E501
        :type: float
        """

        self._route_distance = route_distance

    @property
    def service_duration(self):
        """Gets the service_duration of this ManifestOrder.  # noqa: E501


        :return: The service_duration of this ManifestOrder.  # noqa: E501
        :rtype: float
        """
        return self._service_duration

    @service_duration.setter
    def service_duration(self, service_duration):
        """Sets the service_duration of this ManifestOrder.


        :param service_duration: The service_duration of this ManifestOrder.  # noqa: E501
        :type: float
        """

        self._service_duration = service_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManifestOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManifestOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
