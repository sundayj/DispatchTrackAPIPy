# coding: utf-8

"""
    DispatchTrack API

    # Authentication The authentication for this API is done via Oauth2 Access Token: - **GetTokenAuth**   You can find the client ID and secret in your application's Admin - Oauth2 Settings tab.   These are then passed via Basic Auth in the request to server's /oauth2/token endpoint to get the access token.   - **Auth**   With the Oauth2 Access Token received from /oauth2/token request, API requests for remaining API endpoints can be made.   It has to be sent as an Authorization Bearer header in the request.   If an invalid or expired access token is used, API will send back a 401 status.     # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_number': 'str',
        'status': 'str',
        'service_type': 'str',
        'description': 'str',
        'account_name': 'str',
        'confirmation_status': 'str',
        'text_confirmation_status': 'str',
        'stop_number': 'float',
        'route_locked': 'bool',
        'delivery_date': 'str',
        'delivery_time_window_start': 'str',
        'delivery_time_window_end': 'str',
        'scheduled_at': 'str',
        'time_window_start': 'str',
        'time_window_end': 'str',
        'route_tag': 'str',
        'service_duration': 'float',
        'service_unit': 'str',
        'survey_status': 'str',
        'survey_received_date': 'str',
        'started_at': 'str',
        'finished_at': 'str',
        'amount': 'float',
        'pieces': 'float',
        'volume': 'float',
        'delivery_charges': 'float',
        'sales_tax': 'float',
        'truck': 'ServiceOrderTruck',
        'drivers': 'list[ServiceOrderDrivers]',
        'pod': 'ServiceOrderPod',
        'customer': 'Customer',
        'images': 'list[Image]',
        'scanned_documents': 'list[ScannedDocument]',
        'notes': 'list[Note]',
        'service_order_items': 'list[Item]',
        'service_order_histories': 'list[History]',
        'additional_fields': 'ServiceOrderAdditionalFields',
        'custom_fields': 'ServiceOrderCustomFields',
        'signature': 'ServiceOrderSignature',
        'surveys': 'ServiceOrderSurveys'
    }

    attribute_map = {
        'order_number': 'order_number',
        'status': 'status',
        'service_type': 'service_type',
        'description': 'description',
        'account_name': 'account_name',
        'confirmation_status': 'confirmation_status',
        'text_confirmation_status': 'text_confirmation_status',
        'stop_number': 'stop_number',
        'route_locked': 'route_locked',
        'delivery_date': 'delivery_date',
        'delivery_time_window_start': 'delivery_time_window_start',
        'delivery_time_window_end': 'delivery_time_window_end',
        'scheduled_at': 'scheduled_at',
        'time_window_start': 'time_window_start',
        'time_window_end': 'time_window_end',
        'route_tag': 'route_tag',
        'service_duration': 'service_duration',
        'service_unit': 'service_unit',
        'survey_status': 'survey_status',
        'survey_received_date': 'survey_received_date',
        'started_at': 'started_at',
        'finished_at': 'finished_at',
        'amount': 'amount',
        'pieces': 'pieces',
        'volume': 'volume',
        'delivery_charges': 'delivery_charges',
        'sales_tax': 'sales_tax',
        'truck': 'truck',
        'drivers': 'drivers',
        'pod': 'pod',
        'customer': 'customer',
        'images': 'images',
        'scanned_documents': 'scanned_documents',
        'notes': 'notes',
        'service_order_items': 'service_order_items',
        'service_order_histories': 'service_order_histories',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields',
        'signature': 'signature',
        'surveys': 'surveys'
    }

    def __init__(self, order_number=None, status=None, service_type=None, description=None, account_name=None, confirmation_status=None, text_confirmation_status=None, stop_number=None, route_locked=None, delivery_date=None, delivery_time_window_start=None, delivery_time_window_end=None, scheduled_at=None, time_window_start=None, time_window_end=None, route_tag=None, service_duration=None, service_unit=None, survey_status=None, survey_received_date=None, started_at=None, finished_at=None, amount=None, pieces=None, volume=None, delivery_charges=None, sales_tax=None, truck=None, drivers=None, pod=None, customer=None, images=None, scanned_documents=None, notes=None, service_order_items=None, service_order_histories=None, additional_fields=None, custom_fields=None, signature=None, surveys=None):  # noqa: E501
        """ServiceOrder - a model defined in Swagger"""  # noqa: E501
        self._order_number = None
        self._status = None
        self._service_type = None
        self._description = None
        self._account_name = None
        self._confirmation_status = None
        self._text_confirmation_status = None
        self._stop_number = None
        self._route_locked = None
        self._delivery_date = None
        self._delivery_time_window_start = None
        self._delivery_time_window_end = None
        self._scheduled_at = None
        self._time_window_start = None
        self._time_window_end = None
        self._route_tag = None
        self._service_duration = None
        self._service_unit = None
        self._survey_status = None
        self._survey_received_date = None
        self._started_at = None
        self._finished_at = None
        self._amount = None
        self._pieces = None
        self._volume = None
        self._delivery_charges = None
        self._sales_tax = None
        self._truck = None
        self._drivers = None
        self._pod = None
        self._customer = None
        self._images = None
        self._scanned_documents = None
        self._notes = None
        self._service_order_items = None
        self._service_order_histories = None
        self._additional_fields = None
        self._custom_fields = None
        self._signature = None
        self._surveys = None
        self.discriminator = None
        if order_number is not None:
            self.order_number = order_number
        if status is not None:
            self.status = status
        if service_type is not None:
            self.service_type = service_type
        if description is not None:
            self.description = description
        if account_name is not None:
            self.account_name = account_name
        if confirmation_status is not None:
            self.confirmation_status = confirmation_status
        if text_confirmation_status is not None:
            self.text_confirmation_status = text_confirmation_status
        if stop_number is not None:
            self.stop_number = stop_number
        if route_locked is not None:
            self.route_locked = route_locked
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if delivery_time_window_start is not None:
            self.delivery_time_window_start = delivery_time_window_start
        if delivery_time_window_end is not None:
            self.delivery_time_window_end = delivery_time_window_end
        if scheduled_at is not None:
            self.scheduled_at = scheduled_at
        if time_window_start is not None:
            self.time_window_start = time_window_start
        if time_window_end is not None:
            self.time_window_end = time_window_end
        if route_tag is not None:
            self.route_tag = route_tag
        if service_duration is not None:
            self.service_duration = service_duration
        if service_unit is not None:
            self.service_unit = service_unit
        if survey_status is not None:
            self.survey_status = survey_status
        if survey_received_date is not None:
            self.survey_received_date = survey_received_date
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if amount is not None:
            self.amount = amount
        if pieces is not None:
            self.pieces = pieces
        if volume is not None:
            self.volume = volume
        if delivery_charges is not None:
            self.delivery_charges = delivery_charges
        if sales_tax is not None:
            self.sales_tax = sales_tax
        if truck is not None:
            self.truck = truck
        if drivers is not None:
            self.drivers = drivers
        if pod is not None:
            self.pod = pod
        if customer is not None:
            self.customer = customer
        if images is not None:
            self.images = images
        if scanned_documents is not None:
            self.scanned_documents = scanned_documents
        if notes is not None:
            self.notes = notes
        if service_order_items is not None:
            self.service_order_items = service_order_items
        if service_order_histories is not None:
            self.service_order_histories = service_order_histories
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if signature is not None:
            self.signature = signature
        if surveys is not None:
            self.surveys = surveys

    @property
    def order_number(self):
        """Gets the order_number of this ServiceOrder.  # noqa: E501


        :return: The order_number of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ServiceOrder.


        :param order_number: The order_number of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def status(self):
        """Gets the status of this ServiceOrder.  # noqa: E501


        :return: The status of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceOrder.


        :param status: The status of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def service_type(self):
        """Gets the service_type of this ServiceOrder.  # noqa: E501


        :return: The service_type of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ServiceOrder.


        :param service_type: The service_type of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._service_type = service_type

    @property
    def description(self):
        """Gets the description of this ServiceOrder.  # noqa: E501


        :return: The description of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceOrder.


        :param description: The description of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def account_name(self):
        """Gets the account_name of this ServiceOrder.  # noqa: E501


        :return: The account_name of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ServiceOrder.


        :param account_name: The account_name of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def confirmation_status(self):
        """Gets the confirmation_status of this ServiceOrder.  # noqa: E501


        :return: The confirmation_status of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_status

    @confirmation_status.setter
    def confirmation_status(self, confirmation_status):
        """Sets the confirmation_status of this ServiceOrder.


        :param confirmation_status: The confirmation_status of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._confirmation_status = confirmation_status

    @property
    def text_confirmation_status(self):
        """Gets the text_confirmation_status of this ServiceOrder.  # noqa: E501


        :return: The text_confirmation_status of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._text_confirmation_status

    @text_confirmation_status.setter
    def text_confirmation_status(self, text_confirmation_status):
        """Sets the text_confirmation_status of this ServiceOrder.


        :param text_confirmation_status: The text_confirmation_status of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._text_confirmation_status = text_confirmation_status

    @property
    def stop_number(self):
        """Gets the stop_number of this ServiceOrder.  # noqa: E501


        :return: The stop_number of this ServiceOrder.  # noqa: E501
        :rtype: float
        """
        return self._stop_number

    @stop_number.setter
    def stop_number(self, stop_number):
        """Sets the stop_number of this ServiceOrder.


        :param stop_number: The stop_number of this ServiceOrder.  # noqa: E501
        :type: float
        """

        self._stop_number = stop_number

    @property
    def route_locked(self):
        """Gets the route_locked of this ServiceOrder.  # noqa: E501


        :return: The route_locked of this ServiceOrder.  # noqa: E501
        :rtype: bool
        """
        return self._route_locked

    @route_locked.setter
    def route_locked(self, route_locked):
        """Sets the route_locked of this ServiceOrder.


        :param route_locked: The route_locked of this ServiceOrder.  # noqa: E501
        :type: bool
        """

        self._route_locked = route_locked

    @property
    def delivery_date(self):
        """Gets the delivery_date of this ServiceOrder.  # noqa: E501


        :return: The delivery_date of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this ServiceOrder.


        :param delivery_date: The delivery_date of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._delivery_date = delivery_date

    @property
    def delivery_time_window_start(self):
        """Gets the delivery_time_window_start of this ServiceOrder.  # noqa: E501


        :return: The delivery_time_window_start of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._delivery_time_window_start

    @delivery_time_window_start.setter
    def delivery_time_window_start(self, delivery_time_window_start):
        """Sets the delivery_time_window_start of this ServiceOrder.


        :param delivery_time_window_start: The delivery_time_window_start of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._delivery_time_window_start = delivery_time_window_start

    @property
    def delivery_time_window_end(self):
        """Gets the delivery_time_window_end of this ServiceOrder.  # noqa: E501


        :return: The delivery_time_window_end of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._delivery_time_window_end

    @delivery_time_window_end.setter
    def delivery_time_window_end(self, delivery_time_window_end):
        """Sets the delivery_time_window_end of this ServiceOrder.


        :param delivery_time_window_end: The delivery_time_window_end of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._delivery_time_window_end = delivery_time_window_end

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this ServiceOrder.  # noqa: E501


        :return: The scheduled_at of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this ServiceOrder.


        :param scheduled_at: The scheduled_at of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._scheduled_at = scheduled_at

    @property
    def time_window_start(self):
        """Gets the time_window_start of this ServiceOrder.  # noqa: E501


        :return: The time_window_start of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._time_window_start

    @time_window_start.setter
    def time_window_start(self, time_window_start):
        """Sets the time_window_start of this ServiceOrder.


        :param time_window_start: The time_window_start of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._time_window_start = time_window_start

    @property
    def time_window_end(self):
        """Gets the time_window_end of this ServiceOrder.  # noqa: E501


        :return: The time_window_end of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._time_window_end

    @time_window_end.setter
    def time_window_end(self, time_window_end):
        """Sets the time_window_end of this ServiceOrder.


        :param time_window_end: The time_window_end of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._time_window_end = time_window_end

    @property
    def route_tag(self):
        """Gets the route_tag of this ServiceOrder.  # noqa: E501


        :return: The route_tag of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._route_tag

    @route_tag.setter
    def route_tag(self, route_tag):
        """Sets the route_tag of this ServiceOrder.


        :param route_tag: The route_tag of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._route_tag = route_tag

    @property
    def service_duration(self):
        """Gets the service_duration of this ServiceOrder.  # noqa: E501


        :return: The service_duration of this ServiceOrder.  # noqa: E501
        :rtype: float
        """
        return self._service_duration

    @service_duration.setter
    def service_duration(self, service_duration):
        """Sets the service_duration of this ServiceOrder.


        :param service_duration: The service_duration of this ServiceOrder.  # noqa: E501
        :type: float
        """

        self._service_duration = service_duration

    @property
    def service_unit(self):
        """Gets the service_unit of this ServiceOrder.  # noqa: E501


        :return: The service_unit of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._service_unit

    @service_unit.setter
    def service_unit(self, service_unit):
        """Sets the service_unit of this ServiceOrder.


        :param service_unit: The service_unit of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._service_unit = service_unit

    @property
    def survey_status(self):
        """Gets the survey_status of this ServiceOrder.  # noqa: E501


        :return: The survey_status of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._survey_status

    @survey_status.setter
    def survey_status(self, survey_status):
        """Sets the survey_status of this ServiceOrder.


        :param survey_status: The survey_status of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._survey_status = survey_status

    @property
    def survey_received_date(self):
        """Gets the survey_received_date of this ServiceOrder.  # noqa: E501


        :return: The survey_received_date of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._survey_received_date

    @survey_received_date.setter
    def survey_received_date(self, survey_received_date):
        """Sets the survey_received_date of this ServiceOrder.


        :param survey_received_date: The survey_received_date of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._survey_received_date = survey_received_date

    @property
    def started_at(self):
        """Gets the started_at of this ServiceOrder.  # noqa: E501


        :return: The started_at of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ServiceOrder.


        :param started_at: The started_at of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this ServiceOrder.  # noqa: E501


        :return: The finished_at of this ServiceOrder.  # noqa: E501
        :rtype: str
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this ServiceOrder.


        :param finished_at: The finished_at of this ServiceOrder.  # noqa: E501
        :type: str
        """

        self._finished_at = finished_at

    @property
    def amount(self):
        """Gets the amount of this ServiceOrder.  # noqa: E501


        :return: The amount of this ServiceOrder.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ServiceOrder.


        :param amount: The amount of this ServiceOrder.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def pieces(self):
        """Gets the pieces of this ServiceOrder.  # noqa: E501


        :return: The pieces of this ServiceOrder.  # noqa: E501
        :rtype: float
        """
        return self._pieces

    @pieces.setter
    def pieces(self, pieces):
        """Sets the pieces of this ServiceOrder.


        :param pieces: The pieces of this ServiceOrder.  # noqa: E501
        :type: float
        """

        self._pieces = pieces

    @property
    def volume(self):
        """Gets the volume of this ServiceOrder.  # noqa: E501


        :return: The volume of this ServiceOrder.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ServiceOrder.


        :param volume: The volume of this ServiceOrder.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def delivery_charges(self):
        """Gets the delivery_charges of this ServiceOrder.  # noqa: E501


        :return: The delivery_charges of this ServiceOrder.  # noqa: E501
        :rtype: float
        """
        return self._delivery_charges

    @delivery_charges.setter
    def delivery_charges(self, delivery_charges):
        """Sets the delivery_charges of this ServiceOrder.


        :param delivery_charges: The delivery_charges of this ServiceOrder.  # noqa: E501
        :type: float
        """

        self._delivery_charges = delivery_charges

    @property
    def sales_tax(self):
        """Gets the sales_tax of this ServiceOrder.  # noqa: E501


        :return: The sales_tax of this ServiceOrder.  # noqa: E501
        :rtype: float
        """
        return self._sales_tax

    @sales_tax.setter
    def sales_tax(self, sales_tax):
        """Sets the sales_tax of this ServiceOrder.


        :param sales_tax: The sales_tax of this ServiceOrder.  # noqa: E501
        :type: float
        """

        self._sales_tax = sales_tax

    @property
    def truck(self):
        """Gets the truck of this ServiceOrder.  # noqa: E501


        :return: The truck of this ServiceOrder.  # noqa: E501
        :rtype: ServiceOrderTruck
        """
        return self._truck

    @truck.setter
    def truck(self, truck):
        """Sets the truck of this ServiceOrder.


        :param truck: The truck of this ServiceOrder.  # noqa: E501
        :type: ServiceOrderTruck
        """

        self._truck = truck

    @property
    def drivers(self):
        """Gets the drivers of this ServiceOrder.  # noqa: E501


        :return: The drivers of this ServiceOrder.  # noqa: E501
        :rtype: list[ServiceOrderDrivers]
        """
        return self._drivers

    @drivers.setter
    def drivers(self, drivers):
        """Sets the drivers of this ServiceOrder.


        :param drivers: The drivers of this ServiceOrder.  # noqa: E501
        :type: list[ServiceOrderDrivers]
        """

        self._drivers = drivers

    @property
    def pod(self):
        """Gets the pod of this ServiceOrder.  # noqa: E501


        :return: The pod of this ServiceOrder.  # noqa: E501
        :rtype: ServiceOrderPod
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this ServiceOrder.


        :param pod: The pod of this ServiceOrder.  # noqa: E501
        :type: ServiceOrderPod
        """

        self._pod = pod

    @property
    def customer(self):
        """Gets the customer of this ServiceOrder.  # noqa: E501


        :return: The customer of this ServiceOrder.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ServiceOrder.


        :param customer: The customer of this ServiceOrder.  # noqa: E501
        :type: Customer
        """

        self._customer = customer

    @property
    def images(self):
        """Gets the images of this ServiceOrder.  # noqa: E501


        :return: The images of this ServiceOrder.  # noqa: E501
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ServiceOrder.


        :param images: The images of this ServiceOrder.  # noqa: E501
        :type: list[Image]
        """

        self._images = images

    @property
    def scanned_documents(self):
        """Gets the scanned_documents of this ServiceOrder.  # noqa: E501


        :return: The scanned_documents of this ServiceOrder.  # noqa: E501
        :rtype: list[ScannedDocument]
        """
        return self._scanned_documents

    @scanned_documents.setter
    def scanned_documents(self, scanned_documents):
        """Sets the scanned_documents of this ServiceOrder.


        :param scanned_documents: The scanned_documents of this ServiceOrder.  # noqa: E501
        :type: list[ScannedDocument]
        """

        self._scanned_documents = scanned_documents

    @property
    def notes(self):
        """Gets the notes of this ServiceOrder.  # noqa: E501


        :return: The notes of this ServiceOrder.  # noqa: E501
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ServiceOrder.


        :param notes: The notes of this ServiceOrder.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def service_order_items(self):
        """Gets the service_order_items of this ServiceOrder.  # noqa: E501


        :return: The service_order_items of this ServiceOrder.  # noqa: E501
        :rtype: list[Item]
        """
        return self._service_order_items

    @service_order_items.setter
    def service_order_items(self, service_order_items):
        """Sets the service_order_items of this ServiceOrder.


        :param service_order_items: The service_order_items of this ServiceOrder.  # noqa: E501
        :type: list[Item]
        """

        self._service_order_items = service_order_items

    @property
    def service_order_histories(self):
        """Gets the service_order_histories of this ServiceOrder.  # noqa: E501


        :return: The service_order_histories of this ServiceOrder.  # noqa: E501
        :rtype: list[History]
        """
        return self._service_order_histories

    @service_order_histories.setter
    def service_order_histories(self, service_order_histories):
        """Sets the service_order_histories of this ServiceOrder.


        :param service_order_histories: The service_order_histories of this ServiceOrder.  # noqa: E501
        :type: list[History]
        """

        self._service_order_histories = service_order_histories

    @property
    def additional_fields(self):
        """Gets the additional_fields of this ServiceOrder.  # noqa: E501


        :return: The additional_fields of this ServiceOrder.  # noqa: E501
        :rtype: ServiceOrderAdditionalFields
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this ServiceOrder.


        :param additional_fields: The additional_fields of this ServiceOrder.  # noqa: E501
        :type: ServiceOrderAdditionalFields
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ServiceOrder.  # noqa: E501


        :return: The custom_fields of this ServiceOrder.  # noqa: E501
        :rtype: ServiceOrderCustomFields
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ServiceOrder.


        :param custom_fields: The custom_fields of this ServiceOrder.  # noqa: E501
        :type: ServiceOrderCustomFields
        """

        self._custom_fields = custom_fields

    @property
    def signature(self):
        """Gets the signature of this ServiceOrder.  # noqa: E501


        :return: The signature of this ServiceOrder.  # noqa: E501
        :rtype: ServiceOrderSignature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ServiceOrder.


        :param signature: The signature of this ServiceOrder.  # noqa: E501
        :type: ServiceOrderSignature
        """

        self._signature = signature

    @property
    def surveys(self):
        """Gets the surveys of this ServiceOrder.  # noqa: E501


        :return: The surveys of this ServiceOrder.  # noqa: E501
        :rtype: ServiceOrderSurveys
        """
        return self._surveys

    @surveys.setter
    def surveys(self, surveys):
        """Sets the surveys of this ServiceOrder.


        :param surveys: The surveys of this ServiceOrder.  # noqa: E501
        :type: ServiceOrderSurveys
        """

        self._surveys = surveys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
