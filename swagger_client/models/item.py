# coding: utf-8

"""
    DispatchTrack API

    # Authentication The authentication for this API is done via Oauth2 Access Token: - **GetTokenAuth**   You can find the client ID and secret in your application's Admin - Oauth2 Settings tab.   These are then passed via Basic Auth in the request to server's /oauth2/token endpoint to get the access token.   - **Auth**   With the Oauth2 Access Token received from /oauth2/token request, API requests for remaining API endpoints can be made.   It has to be sent as an Authorization Bearer header in the request.   If an invalid or expired access token is used, API will send back a 401 status.     # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku_number': 'str',
        'serial_number': 'str',
        'description': 'str',
        'line_sequence': 'float',
        'quantity': 'float',
        'weight': 'float',
        'delivered': 'bool',
        'delivered_quantity': 'float',
        'manager_notes': 'str',
        'customer_notes': 'str',
        'driver_notes': 'str',
        'amount': 'float',
        'checked_quantity': 'float',
        'return_code': 'str',
        'driver_return_code': 'str',
        'manager_return_code': 'str',
        'location_code': 'str'
    }

    attribute_map = {
        'sku_number': 'sku_number',
        'serial_number': 'serial_number',
        'description': 'description',
        'line_sequence': 'line_sequence',
        'quantity': 'quantity',
        'weight': 'weight',
        'delivered': 'delivered',
        'delivered_quantity': 'delivered_quantity',
        'manager_notes': 'manager_notes',
        'customer_notes': 'customer_notes',
        'driver_notes': 'driver_notes',
        'amount': 'amount',
        'checked_quantity': 'checked_quantity',
        'return_code': 'return_code',
        'driver_return_code': 'driver_return_code',
        'manager_return_code': 'manager_return_code',
        'location_code': 'location_code'
    }

    def __init__(self, sku_number=None, serial_number=None, description=None, line_sequence=None, quantity=None, weight=None, delivered=None, delivered_quantity=None, manager_notes=None, customer_notes=None, driver_notes=None, amount=None, checked_quantity=None, return_code=None, driver_return_code=None, manager_return_code=None, location_code=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        self._sku_number = None
        self._serial_number = None
        self._description = None
        self._line_sequence = None
        self._quantity = None
        self._weight = None
        self._delivered = None
        self._delivered_quantity = None
        self._manager_notes = None
        self._customer_notes = None
        self._driver_notes = None
        self._amount = None
        self._checked_quantity = None
        self._return_code = None
        self._driver_return_code = None
        self._manager_return_code = None
        self._location_code = None
        self.discriminator = None
        if sku_number is not None:
            self.sku_number = sku_number
        if serial_number is not None:
            self.serial_number = serial_number
        if description is not None:
            self.description = description
        if line_sequence is not None:
            self.line_sequence = line_sequence
        if quantity is not None:
            self.quantity = quantity
        if weight is not None:
            self.weight = weight
        if delivered is not None:
            self.delivered = delivered
        if delivered_quantity is not None:
            self.delivered_quantity = delivered_quantity
        if manager_notes is not None:
            self.manager_notes = manager_notes
        if customer_notes is not None:
            self.customer_notes = customer_notes
        if driver_notes is not None:
            self.driver_notes = driver_notes
        if amount is not None:
            self.amount = amount
        if checked_quantity is not None:
            self.checked_quantity = checked_quantity
        if return_code is not None:
            self.return_code = return_code
        if driver_return_code is not None:
            self.driver_return_code = driver_return_code
        if manager_return_code is not None:
            self.manager_return_code = manager_return_code
        if location_code is not None:
            self.location_code = location_code

    @property
    def sku_number(self):
        """Gets the sku_number of this Item.  # noqa: E501


        :return: The sku_number of this Item.  # noqa: E501
        :rtype: str
        """
        return self._sku_number

    @sku_number.setter
    def sku_number(self, sku_number):
        """Sets the sku_number of this Item.


        :param sku_number: The sku_number of this Item.  # noqa: E501
        :type: str
        """

        self._sku_number = sku_number

    @property
    def serial_number(self):
        """Gets the serial_number of this Item.  # noqa: E501


        :return: The serial_number of this Item.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Item.


        :param serial_number: The serial_number of this Item.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def description(self):
        """Gets the description of this Item.  # noqa: E501


        :return: The description of this Item.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.


        :param description: The description of this Item.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def line_sequence(self):
        """Gets the line_sequence of this Item.  # noqa: E501


        :return: The line_sequence of this Item.  # noqa: E501
        :rtype: float
        """
        return self._line_sequence

    @line_sequence.setter
    def line_sequence(self, line_sequence):
        """Sets the line_sequence of this Item.


        :param line_sequence: The line_sequence of this Item.  # noqa: E501
        :type: float
        """

        self._line_sequence = line_sequence

    @property
    def quantity(self):
        """Gets the quantity of this Item.  # noqa: E501


        :return: The quantity of this Item.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item.


        :param quantity: The quantity of this Item.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def weight(self):
        """Gets the weight of this Item.  # noqa: E501


        :return: The weight of this Item.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Item.


        :param weight: The weight of this Item.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def delivered(self):
        """Gets the delivered of this Item.  # noqa: E501


        :return: The delivered of this Item.  # noqa: E501
        :rtype: bool
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """Sets the delivered of this Item.


        :param delivered: The delivered of this Item.  # noqa: E501
        :type: bool
        """

        self._delivered = delivered

    @property
    def delivered_quantity(self):
        """Gets the delivered_quantity of this Item.  # noqa: E501


        :return: The delivered_quantity of this Item.  # noqa: E501
        :rtype: float
        """
        return self._delivered_quantity

    @delivered_quantity.setter
    def delivered_quantity(self, delivered_quantity):
        """Sets the delivered_quantity of this Item.


        :param delivered_quantity: The delivered_quantity of this Item.  # noqa: E501
        :type: float
        """

        self._delivered_quantity = delivered_quantity

    @property
    def manager_notes(self):
        """Gets the manager_notes of this Item.  # noqa: E501


        :return: The manager_notes of this Item.  # noqa: E501
        :rtype: str
        """
        return self._manager_notes

    @manager_notes.setter
    def manager_notes(self, manager_notes):
        """Sets the manager_notes of this Item.


        :param manager_notes: The manager_notes of this Item.  # noqa: E501
        :type: str
        """

        self._manager_notes = manager_notes

    @property
    def customer_notes(self):
        """Gets the customer_notes of this Item.  # noqa: E501


        :return: The customer_notes of this Item.  # noqa: E501
        :rtype: str
        """
        return self._customer_notes

    @customer_notes.setter
    def customer_notes(self, customer_notes):
        """Sets the customer_notes of this Item.


        :param customer_notes: The customer_notes of this Item.  # noqa: E501
        :type: str
        """

        self._customer_notes = customer_notes

    @property
    def driver_notes(self):
        """Gets the driver_notes of this Item.  # noqa: E501


        :return: The driver_notes of this Item.  # noqa: E501
        :rtype: str
        """
        return self._driver_notes

    @driver_notes.setter
    def driver_notes(self, driver_notes):
        """Sets the driver_notes of this Item.


        :param driver_notes: The driver_notes of this Item.  # noqa: E501
        :type: str
        """

        self._driver_notes = driver_notes

    @property
    def amount(self):
        """Gets the amount of this Item.  # noqa: E501


        :return: The amount of this Item.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Item.


        :param amount: The amount of this Item.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def checked_quantity(self):
        """Gets the checked_quantity of this Item.  # noqa: E501


        :return: The checked_quantity of this Item.  # noqa: E501
        :rtype: float
        """
        return self._checked_quantity

    @checked_quantity.setter
    def checked_quantity(self, checked_quantity):
        """Sets the checked_quantity of this Item.


        :param checked_quantity: The checked_quantity of this Item.  # noqa: E501
        :type: float
        """

        self._checked_quantity = checked_quantity

    @property
    def return_code(self):
        """Gets the return_code of this Item.  # noqa: E501


        :return: The return_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this Item.


        :param return_code: The return_code of this Item.  # noqa: E501
        :type: str
        """

        self._return_code = return_code

    @property
    def driver_return_code(self):
        """Gets the driver_return_code of this Item.  # noqa: E501


        :return: The driver_return_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._driver_return_code

    @driver_return_code.setter
    def driver_return_code(self, driver_return_code):
        """Sets the driver_return_code of this Item.


        :param driver_return_code: The driver_return_code of this Item.  # noqa: E501
        :type: str
        """

        self._driver_return_code = driver_return_code

    @property
    def manager_return_code(self):
        """Gets the manager_return_code of this Item.  # noqa: E501


        :return: The manager_return_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._manager_return_code

    @manager_return_code.setter
    def manager_return_code(self, manager_return_code):
        """Sets the manager_return_code of this Item.


        :param manager_return_code: The manager_return_code of this Item.  # noqa: E501
        :type: str
        """

        self._manager_return_code = manager_return_code

    @property
    def location_code(self):
        """Gets the location_code of this Item.  # noqa: E501


        :return: The location_code of this Item.  # noqa: E501
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this Item.


        :param location_code: The location_code of this Item.  # noqa: E501
        :type: str
        """

        self._location_code = location_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
