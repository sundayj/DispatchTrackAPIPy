# coding: utf-8

"""
    DispatchTrack API

    # Authentication The authentication for this API is done via Oauth2 Access Token: - **GetTokenAuth**   You can find the client ID and secret in your application's Admin - Oauth2 Settings tab.   These are then passed via Basic Auth in the request to server's /oauth2/token endpoint to get the access token.   - **Auth**   With the Oauth2 Access Token received from /oauth2/token request, API requests for remaining API endpoints can be made.   It has to be sent as an Authorization Bearer header in the request.   If an invalid or expired access token is used, API will send back a 401 status.     # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportOrderCustomer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'state': 'str',
        'zip': 'str',
        'phone1': 'str',
        'phone2': 'str',
        'phone3': 'str',
        'email': 'str',
        'preferred_contact_mode': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'customer_id': 'str',
        'send_survey': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'state': 'state',
        'zip': 'zip',
        'phone1': 'phone1',
        'phone2': 'phone2',
        'phone3': 'phone3',
        'email': 'email',
        'preferred_contact_mode': 'preferred_contact_mode',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'customer_id': 'customer_id',
        'send_survey': 'send_survey'
    }

    def __init__(self, name=None, address1=None, address2=None, city=None, state=None, zip=None, phone1=None, phone2=None, phone3=None, email=None, preferred_contact_mode=None, latitude=None, longitude=None, customer_id=None, send_survey=None):  # noqa: E501
        """ImportOrderCustomer - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._address1 = None
        self._address2 = None
        self._city = None
        self._state = None
        self._zip = None
        self._phone1 = None
        self._phone2 = None
        self._phone3 = None
        self._email = None
        self._preferred_contact_mode = None
        self._latitude = None
        self._longitude = None
        self._customer_id = None
        self._send_survey = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if zip is not None:
            self.zip = zip
        if phone1 is not None:
            self.phone1 = phone1
        if phone2 is not None:
            self.phone2 = phone2
        if phone3 is not None:
            self.phone3 = phone3
        if email is not None:
            self.email = email
        if preferred_contact_mode is not None:
            self.preferred_contact_mode = preferred_contact_mode
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if customer_id is not None:
            self.customer_id = customer_id
        if send_survey is not None:
            self.send_survey = send_survey

    @property
    def name(self):
        """Gets the name of this ImportOrderCustomer.  # noqa: E501


        :return: The name of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportOrderCustomer.


        :param name: The name of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address1(self):
        """Gets the address1 of this ImportOrderCustomer.  # noqa: E501


        :return: The address1 of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this ImportOrderCustomer.


        :param address1: The address1 of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this ImportOrderCustomer.  # noqa: E501


        :return: The address2 of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this ImportOrderCustomer.


        :param address2: The address2 of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this ImportOrderCustomer.  # noqa: E501


        :return: The city of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ImportOrderCustomer.


        :param city: The city of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this ImportOrderCustomer.  # noqa: E501


        :return: The state of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportOrderCustomer.


        :param state: The state of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this ImportOrderCustomer.  # noqa: E501


        :return: The zip of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this ImportOrderCustomer.


        :param zip: The zip of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def phone1(self):
        """Gets the phone1 of this ImportOrderCustomer.  # noqa: E501


        :return: The phone1 of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._phone1

    @phone1.setter
    def phone1(self, phone1):
        """Sets the phone1 of this ImportOrderCustomer.


        :param phone1: The phone1 of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._phone1 = phone1

    @property
    def phone2(self):
        """Gets the phone2 of this ImportOrderCustomer.  # noqa: E501


        :return: The phone2 of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._phone2

    @phone2.setter
    def phone2(self, phone2):
        """Sets the phone2 of this ImportOrderCustomer.


        :param phone2: The phone2 of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._phone2 = phone2

    @property
    def phone3(self):
        """Gets the phone3 of this ImportOrderCustomer.  # noqa: E501


        :return: The phone3 of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._phone3

    @phone3.setter
    def phone3(self, phone3):
        """Sets the phone3 of this ImportOrderCustomer.


        :param phone3: The phone3 of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._phone3 = phone3

    @property
    def email(self):
        """Gets the email of this ImportOrderCustomer.  # noqa: E501


        :return: The email of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ImportOrderCustomer.


        :param email: The email of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def preferred_contact_mode(self):
        """Gets the preferred_contact_mode of this ImportOrderCustomer.  # noqa: E501

        Needs comma separated values from accepted contact modes - Email,Voice,Text (op)  # noqa: E501

        :return: The preferred_contact_mode of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._preferred_contact_mode

    @preferred_contact_mode.setter
    def preferred_contact_mode(self, preferred_contact_mode):
        """Sets the preferred_contact_mode of this ImportOrderCustomer.

        Needs comma separated values from accepted contact modes - Email,Voice,Text (op)  # noqa: E501

        :param preferred_contact_mode: The preferred_contact_mode of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._preferred_contact_mode = preferred_contact_mode

    @property
    def latitude(self):
        """Gets the latitude of this ImportOrderCustomer.  # noqa: E501

        Latitude (op)  # noqa: E501

        :return: The latitude of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ImportOrderCustomer.

        Latitude (op)  # noqa: E501

        :param latitude: The latitude of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this ImportOrderCustomer.  # noqa: E501

        Longitude (op)  # noqa: E501

        :return: The longitude of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ImportOrderCustomer.

        Longitude (op)  # noqa: E501

        :param longitude: The longitude of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def customer_id(self):
        """Gets the customer_id of this ImportOrderCustomer.  # noqa: E501


        :return: The customer_id of this ImportOrderCustomer.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ImportOrderCustomer.


        :param customer_id: The customer_id of this ImportOrderCustomer.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def send_survey(self):
        """Gets the send_survey of this ImportOrderCustomer.  # noqa: E501


        :return: The send_survey of this ImportOrderCustomer.  # noqa: E501
        :rtype: bool
        """
        return self._send_survey

    @send_survey.setter
    def send_survey(self, send_survey):
        """Sets the send_survey of this ImportOrderCustomer.


        :param send_survey: The send_survey of this ImportOrderCustomer.  # noqa: E501
        :type: bool
        """

        self._send_survey = send_survey

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportOrderCustomer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportOrderCustomer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
