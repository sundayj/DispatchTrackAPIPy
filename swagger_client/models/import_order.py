# coding: utf-8

"""
    DispatchTrack API

    # Authentication The authentication for this API is done via Oauth2 Access Token: - **GetTokenAuth**   You can find the client ID and secret in your application's Admin - Oauth2 Settings tab.   These are then passed via Basic Auth in the request to server's /oauth2/token endpoint to get the access token.   - **Auth**   With the Oauth2 Access Token received from /oauth2/token request, API requests for remaining API endpoints can be made.   It has to be sent as an Authorization Bearer header in the request.   If an invalid or expired access token is used, API will send back a 401 status.     # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_number': 'str',
        'account_name': 'str',
        'service_type': 'str',
        'description': 'str',
        'status': 'str',
        'ready_to_schedule_date': 'str',
        'schedule_before_date': 'str',
        'delivery_date': 'str',
        'delivery_time_window_start': 'str',
        'delivery_time_window_end': 'str',
        'amount': 'float',
        'cod_amount': 'float',
        'cube': 'float',
        'weight': 'float',
        'pieces': 'float',
        'delivery_charge': 'float',
        'taxes': 'float',
        'skill_level': 'float',
        'equipment_type': 'str',
        'additional_fields': 'ImportOrderAdditionalFields',
        'custom_fields': 'ImportOrderCustomFields',
        'customer': 'ImportOrderCustomer',
        'items': 'list[ImportOrderItems]',
        'notes': 'list[ImportOrderNotes]'
    }

    attribute_map = {
        'order_number': 'order_number',
        'account_name': 'account_name',
        'service_type': 'service_type',
        'description': 'description',
        'status': 'status',
        'ready_to_schedule_date': 'ready_to_schedule_date',
        'schedule_before_date': 'schedule_before_date',
        'delivery_date': 'delivery_date',
        'delivery_time_window_start': 'delivery_time_window_start',
        'delivery_time_window_end': 'delivery_time_window_end',
        'amount': 'amount',
        'cod_amount': 'cod_amount',
        'cube': 'cube',
        'weight': 'weight',
        'pieces': 'pieces',
        'delivery_charge': 'delivery_charge',
        'taxes': 'taxes',
        'skill_level': 'skill_level',
        'equipment_type': 'equipment_type',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields',
        'customer': 'customer',
        'items': 'items',
        'notes': 'notes'
    }

    def __init__(self, order_number=None, account_name=None, service_type=None, description=None, status='New', ready_to_schedule_date=None, schedule_before_date=None, delivery_date=None, delivery_time_window_start=None, delivery_time_window_end=None, amount=None, cod_amount=None, cube=None, weight=None, pieces=None, delivery_charge=None, taxes=None, skill_level=None, equipment_type=None, additional_fields=None, custom_fields=None, customer=None, items=None, notes=None):  # noqa: E501
        """ImportOrder - a model defined in Swagger"""  # noqa: E501
        self._order_number = None
        self._account_name = None
        self._service_type = None
        self._description = None
        self._status = None
        self._ready_to_schedule_date = None
        self._schedule_before_date = None
        self._delivery_date = None
        self._delivery_time_window_start = None
        self._delivery_time_window_end = None
        self._amount = None
        self._cod_amount = None
        self._cube = None
        self._weight = None
        self._pieces = None
        self._delivery_charge = None
        self._taxes = None
        self._skill_level = None
        self._equipment_type = None
        self._additional_fields = None
        self._custom_fields = None
        self._customer = None
        self._items = None
        self._notes = None
        self.discriminator = None
        if order_number is not None:
            self.order_number = order_number
        if account_name is not None:
            self.account_name = account_name
        if service_type is not None:
            self.service_type = service_type
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if ready_to_schedule_date is not None:
            self.ready_to_schedule_date = ready_to_schedule_date
        if schedule_before_date is not None:
            self.schedule_before_date = schedule_before_date
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if delivery_time_window_start is not None:
            self.delivery_time_window_start = delivery_time_window_start
        if delivery_time_window_end is not None:
            self.delivery_time_window_end = delivery_time_window_end
        if amount is not None:
            self.amount = amount
        if cod_amount is not None:
            self.cod_amount = cod_amount
        if cube is not None:
            self.cube = cube
        if weight is not None:
            self.weight = weight
        if pieces is not None:
            self.pieces = pieces
        if delivery_charge is not None:
            self.delivery_charge = delivery_charge
        if taxes is not None:
            self.taxes = taxes
        if skill_level is not None:
            self.skill_level = skill_level
        if equipment_type is not None:
            self.equipment_type = equipment_type
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if customer is not None:
            self.customer = customer
        if items is not None:
            self.items = items
        if notes is not None:
            self.notes = notes

    @property
    def order_number(self):
        """Gets the order_number of this ImportOrder.  # noqa: E501


        :return: The order_number of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ImportOrder.


        :param order_number: The order_number of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def account_name(self):
        """Gets the account_name of this ImportOrder.  # noqa: E501


        :return: The account_name of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ImportOrder.


        :param account_name: The account_name of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def service_type(self):
        """Gets the service_type of this ImportOrder.  # noqa: E501


        :return: The service_type of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ImportOrder.


        :param service_type: The service_type of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._service_type = service_type

    @property
    def description(self):
        """Gets the description of this ImportOrder.  # noqa: E501


        :return: The description of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportOrder.


        :param description: The description of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this ImportOrder.  # noqa: E501

        Use this if you are using DispatchTrack Customer Self Scheduling System  # noqa: E501

        :return: The status of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportOrder.

        Use this if you are using DispatchTrack Customer Self Scheduling System  # noqa: E501

        :param status: The status of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def ready_to_schedule_date(self):
        """Gets the ready_to_schedule_date of this ImportOrder.  # noqa: E501

        Use this if you are using DispatchTrack Customer Self Scheduling System  # noqa: E501

        :return: The ready_to_schedule_date of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._ready_to_schedule_date

    @ready_to_schedule_date.setter
    def ready_to_schedule_date(self, ready_to_schedule_date):
        """Sets the ready_to_schedule_date of this ImportOrder.

        Use this if you are using DispatchTrack Customer Self Scheduling System  # noqa: E501

        :param ready_to_schedule_date: The ready_to_schedule_date of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._ready_to_schedule_date = ready_to_schedule_date

    @property
    def schedule_before_date(self):
        """Gets the schedule_before_date of this ImportOrder.  # noqa: E501

        Use this if you are using DispatchTrack Customer Self Scheduling System  # noqa: E501

        :return: The schedule_before_date of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._schedule_before_date

    @schedule_before_date.setter
    def schedule_before_date(self, schedule_before_date):
        """Sets the schedule_before_date of this ImportOrder.

        Use this if you are using DispatchTrack Customer Self Scheduling System  # noqa: E501

        :param schedule_before_date: The schedule_before_date of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._schedule_before_date = schedule_before_date

    @property
    def delivery_date(self):
        """Gets the delivery_date of this ImportOrder.  # noqa: E501


        :return: The delivery_date of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this ImportOrder.


        :param delivery_date: The delivery_date of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._delivery_date = delivery_date

    @property
    def delivery_time_window_start(self):
        """Gets the delivery_time_window_start of this ImportOrder.  # noqa: E501


        :return: The delivery_time_window_start of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._delivery_time_window_start

    @delivery_time_window_start.setter
    def delivery_time_window_start(self, delivery_time_window_start):
        """Sets the delivery_time_window_start of this ImportOrder.


        :param delivery_time_window_start: The delivery_time_window_start of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._delivery_time_window_start = delivery_time_window_start

    @property
    def delivery_time_window_end(self):
        """Gets the delivery_time_window_end of this ImportOrder.  # noqa: E501


        :return: The delivery_time_window_end of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._delivery_time_window_end

    @delivery_time_window_end.setter
    def delivery_time_window_end(self, delivery_time_window_end):
        """Sets the delivery_time_window_end of this ImportOrder.


        :param delivery_time_window_end: The delivery_time_window_end of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._delivery_time_window_end = delivery_time_window_end

    @property
    def amount(self):
        """Gets the amount of this ImportOrder.  # noqa: E501


        :return: The amount of this ImportOrder.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ImportOrder.


        :param amount: The amount of this ImportOrder.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def cod_amount(self):
        """Gets the cod_amount of this ImportOrder.  # noqa: E501


        :return: The cod_amount of this ImportOrder.  # noqa: E501
        :rtype: float
        """
        return self._cod_amount

    @cod_amount.setter
    def cod_amount(self, cod_amount):
        """Sets the cod_amount of this ImportOrder.


        :param cod_amount: The cod_amount of this ImportOrder.  # noqa: E501
        :type: float
        """

        self._cod_amount = cod_amount

    @property
    def cube(self):
        """Gets the cube of this ImportOrder.  # noqa: E501


        :return: The cube of this ImportOrder.  # noqa: E501
        :rtype: float
        """
        return self._cube

    @cube.setter
    def cube(self, cube):
        """Sets the cube of this ImportOrder.


        :param cube: The cube of this ImportOrder.  # noqa: E501
        :type: float
        """

        self._cube = cube

    @property
    def weight(self):
        """Gets the weight of this ImportOrder.  # noqa: E501


        :return: The weight of this ImportOrder.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ImportOrder.


        :param weight: The weight of this ImportOrder.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def pieces(self):
        """Gets the pieces of this ImportOrder.  # noqa: E501


        :return: The pieces of this ImportOrder.  # noqa: E501
        :rtype: float
        """
        return self._pieces

    @pieces.setter
    def pieces(self, pieces):
        """Sets the pieces of this ImportOrder.


        :param pieces: The pieces of this ImportOrder.  # noqa: E501
        :type: float
        """

        self._pieces = pieces

    @property
    def delivery_charge(self):
        """Gets the delivery_charge of this ImportOrder.  # noqa: E501


        :return: The delivery_charge of this ImportOrder.  # noqa: E501
        :rtype: float
        """
        return self._delivery_charge

    @delivery_charge.setter
    def delivery_charge(self, delivery_charge):
        """Sets the delivery_charge of this ImportOrder.


        :param delivery_charge: The delivery_charge of this ImportOrder.  # noqa: E501
        :type: float
        """

        self._delivery_charge = delivery_charge

    @property
    def taxes(self):
        """Gets the taxes of this ImportOrder.  # noqa: E501


        :return: The taxes of this ImportOrder.  # noqa: E501
        :rtype: float
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this ImportOrder.


        :param taxes: The taxes of this ImportOrder.  # noqa: E501
        :type: float
        """

        self._taxes = taxes

    @property
    def skill_level(self):
        """Gets the skill_level of this ImportOrder.  # noqa: E501


        :return: The skill_level of this ImportOrder.  # noqa: E501
        :rtype: float
        """
        return self._skill_level

    @skill_level.setter
    def skill_level(self, skill_level):
        """Sets the skill_level of this ImportOrder.


        :param skill_level: The skill_level of this ImportOrder.  # noqa: E501
        :type: float
        """

        self._skill_level = skill_level

    @property
    def equipment_type(self):
        """Gets the equipment_type of this ImportOrder.  # noqa: E501


        :return: The equipment_type of this ImportOrder.  # noqa: E501
        :rtype: str
        """
        return self._equipment_type

    @equipment_type.setter
    def equipment_type(self, equipment_type):
        """Sets the equipment_type of this ImportOrder.


        :param equipment_type: The equipment_type of this ImportOrder.  # noqa: E501
        :type: str
        """

        self._equipment_type = equipment_type

    @property
    def additional_fields(self):
        """Gets the additional_fields of this ImportOrder.  # noqa: E501


        :return: The additional_fields of this ImportOrder.  # noqa: E501
        :rtype: ImportOrderAdditionalFields
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this ImportOrder.


        :param additional_fields: The additional_fields of this ImportOrder.  # noqa: E501
        :type: ImportOrderAdditionalFields
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ImportOrder.  # noqa: E501


        :return: The custom_fields of this ImportOrder.  # noqa: E501
        :rtype: ImportOrderCustomFields
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ImportOrder.


        :param custom_fields: The custom_fields of this ImportOrder.  # noqa: E501
        :type: ImportOrderCustomFields
        """

        self._custom_fields = custom_fields

    @property
    def customer(self):
        """Gets the customer of this ImportOrder.  # noqa: E501


        :return: The customer of this ImportOrder.  # noqa: E501
        :rtype: ImportOrderCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ImportOrder.


        :param customer: The customer of this ImportOrder.  # noqa: E501
        :type: ImportOrderCustomer
        """

        self._customer = customer

    @property
    def items(self):
        """Gets the items of this ImportOrder.  # noqa: E501


        :return: The items of this ImportOrder.  # noqa: E501
        :rtype: list[ImportOrderItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ImportOrder.


        :param items: The items of this ImportOrder.  # noqa: E501
        :type: list[ImportOrderItems]
        """

        self._items = items

    @property
    def notes(self):
        """Gets the notes of this ImportOrder.  # noqa: E501

        Notes (op)  # noqa: E501

        :return: The notes of this ImportOrder.  # noqa: E501
        :rtype: list[ImportOrderNotes]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ImportOrder.

        Notes (op)  # noqa: E501

        :param notes: The notes of this ImportOrder.  # noqa: E501
        :type: list[ImportOrderNotes]
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
