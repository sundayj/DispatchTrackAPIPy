# coding: utf-8

"""
    DispatchTrack API

    # Authentication The authentication for this API is done via Oauth2 Access Token: - **GetTokenAuth**   You can find the client ID and secret in your application's Admin - Oauth2 Settings tab.   These are then passed via Basic Auth in the request to server's /oauth2/token endpoint to get the access token.   - **Auth**   With the Oauth2 Access Token received from /oauth2/token request, API requests for remaining API endpoints can be made.   It has to be sent as an Authorization Bearer header in the request.   If an invalid or expired access token is used, API will send back a 401 status.     # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddOrderSuccessData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'float',
        'failed': 'float',
        'failed_orders': 'list[AddOrderSuccessDataFailedOrders]'
    }

    attribute_map = {
        'successful': 'successful',
        'failed': 'failed',
        'failed_orders': 'failed_orders'
    }

    def __init__(self, successful=None, failed=None, failed_orders=None):  # noqa: E501
        """AddOrderSuccessData - a model defined in Swagger"""  # noqa: E501
        self._successful = None
        self._failed = None
        self._failed_orders = None
        self.discriminator = None
        if successful is not None:
            self.successful = successful
        if failed is not None:
            self.failed = failed
        if failed_orders is not None:
            self.failed_orders = failed_orders

    @property
    def successful(self):
        """Gets the successful of this AddOrderSuccessData.  # noqa: E501


        :return: The successful of this AddOrderSuccessData.  # noqa: E501
        :rtype: float
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this AddOrderSuccessData.


        :param successful: The successful of this AddOrderSuccessData.  # noqa: E501
        :type: float
        """

        self._successful = successful

    @property
    def failed(self):
        """Gets the failed of this AddOrderSuccessData.  # noqa: E501


        :return: The failed of this AddOrderSuccessData.  # noqa: E501
        :rtype: float
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this AddOrderSuccessData.


        :param failed: The failed of this AddOrderSuccessData.  # noqa: E501
        :type: float
        """

        self._failed = failed

    @property
    def failed_orders(self):
        """Gets the failed_orders of this AddOrderSuccessData.  # noqa: E501


        :return: The failed_orders of this AddOrderSuccessData.  # noqa: E501
        :rtype: list[AddOrderSuccessDataFailedOrders]
        """
        return self._failed_orders

    @failed_orders.setter
    def failed_orders(self, failed_orders):
        """Sets the failed_orders of this AddOrderSuccessData.


        :param failed_orders: The failed_orders of this AddOrderSuccessData.  # noqa: E501
        :type: list[AddOrderSuccessDataFailedOrders]
        """

        self._failed_orders = failed_orders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOrderSuccessData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOrderSuccessData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
