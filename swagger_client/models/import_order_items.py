# coding: utf-8

"""
    DispatchTrack API

    # Authentication The authentication for this API is done via Oauth2 Access Token: - **GetTokenAuth**   You can find the client ID and secret in your application's Admin - Oauth2 Settings tab.   These are then passed via Basic Auth in the request to server's /oauth2/token endpoint to get the access token.   - **Auth**   With the Oauth2 Access Token received from /oauth2/token request, API requests for remaining API endpoints can be made.   It has to be sent as an Authorization Bearer header in the request.   If an invalid or expired access token is used, API will send back a 401 status.     # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportOrderItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku_number': 'str',
        'serial_number': 'str',
        'description': 'str',
        'quantity': 'str',
        'price': 'float',
        'line_sequence': 'float',
        'service_duration': 'float',
        'physical_item': 'bool',
        'cube': 'float',
        'weight': 'float',
        'length': 'float',
        'height': 'float',
        'width': 'float',
        'item_note': 'str',
        'location_code': 'str',
        'skill_level': 'float',
        'location': 'str'
    }

    attribute_map = {
        'sku_number': 'sku_number',
        'serial_number': 'serial_number',
        'description': 'description',
        'quantity': 'quantity',
        'price': 'price',
        'line_sequence': 'line_sequence',
        'service_duration': 'service_duration',
        'physical_item': 'physical_item',
        'cube': 'cube',
        'weight': 'weight',
        'length': 'length',
        'height': 'height',
        'width': 'width',
        'item_note': 'item_note',
        'location_code': 'location_code',
        'skill_level': 'skill_level',
        'location': 'location'
    }

    def __init__(self, sku_number=None, serial_number=None, description=None, quantity=None, price=None, line_sequence=None, service_duration=None, physical_item=None, cube=None, weight=None, length=None, height=None, width=None, item_note=None, location_code=None, skill_level=None, location=None):  # noqa: E501
        """ImportOrderItems - a model defined in Swagger"""  # noqa: E501
        self._sku_number = None
        self._serial_number = None
        self._description = None
        self._quantity = None
        self._price = None
        self._line_sequence = None
        self._service_duration = None
        self._physical_item = None
        self._cube = None
        self._weight = None
        self._length = None
        self._height = None
        self._width = None
        self._item_note = None
        self._location_code = None
        self._skill_level = None
        self._location = None
        self.discriminator = None
        if sku_number is not None:
            self.sku_number = sku_number
        if serial_number is not None:
            self.serial_number = serial_number
        if description is not None:
            self.description = description
        if quantity is not None:
            self.quantity = quantity
        if price is not None:
            self.price = price
        if line_sequence is not None:
            self.line_sequence = line_sequence
        if service_duration is not None:
            self.service_duration = service_duration
        if physical_item is not None:
            self.physical_item = physical_item
        if cube is not None:
            self.cube = cube
        if weight is not None:
            self.weight = weight
        if length is not None:
            self.length = length
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if item_note is not None:
            self.item_note = item_note
        if location_code is not None:
            self.location_code = location_code
        if skill_level is not None:
            self.skill_level = skill_level
        if location is not None:
            self.location = location

    @property
    def sku_number(self):
        """Gets the sku_number of this ImportOrderItems.  # noqa: E501


        :return: The sku_number of this ImportOrderItems.  # noqa: E501
        :rtype: str
        """
        return self._sku_number

    @sku_number.setter
    def sku_number(self, sku_number):
        """Sets the sku_number of this ImportOrderItems.


        :param sku_number: The sku_number of this ImportOrderItems.  # noqa: E501
        :type: str
        """

        self._sku_number = sku_number

    @property
    def serial_number(self):
        """Gets the serial_number of this ImportOrderItems.  # noqa: E501


        :return: The serial_number of this ImportOrderItems.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ImportOrderItems.


        :param serial_number: The serial_number of this ImportOrderItems.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def description(self):
        """Gets the description of this ImportOrderItems.  # noqa: E501


        :return: The description of this ImportOrderItems.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportOrderItems.


        :param description: The description of this ImportOrderItems.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity(self):
        """Gets the quantity of this ImportOrderItems.  # noqa: E501


        :return: The quantity of this ImportOrderItems.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ImportOrderItems.


        :param quantity: The quantity of this ImportOrderItems.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this ImportOrderItems.  # noqa: E501


        :return: The price of this ImportOrderItems.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ImportOrderItems.


        :param price: The price of this ImportOrderItems.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def line_sequence(self):
        """Gets the line_sequence of this ImportOrderItems.  # noqa: E501


        :return: The line_sequence of this ImportOrderItems.  # noqa: E501
        :rtype: float
        """
        return self._line_sequence

    @line_sequence.setter
    def line_sequence(self, line_sequence):
        """Sets the line_sequence of this ImportOrderItems.


        :param line_sequence: The line_sequence of this ImportOrderItems.  # noqa: E501
        :type: float
        """

        self._line_sequence = line_sequence

    @property
    def service_duration(self):
        """Gets the service_duration of this ImportOrderItems.  # noqa: E501


        :return: The service_duration of this ImportOrderItems.  # noqa: E501
        :rtype: float
        """
        return self._service_duration

    @service_duration.setter
    def service_duration(self, service_duration):
        """Sets the service_duration of this ImportOrderItems.


        :param service_duration: The service_duration of this ImportOrderItems.  # noqa: E501
        :type: float
        """

        self._service_duration = service_duration

    @property
    def physical_item(self):
        """Gets the physical_item of this ImportOrderItems.  # noqa: E501


        :return: The physical_item of this ImportOrderItems.  # noqa: E501
        :rtype: bool
        """
        return self._physical_item

    @physical_item.setter
    def physical_item(self, physical_item):
        """Sets the physical_item of this ImportOrderItems.


        :param physical_item: The physical_item of this ImportOrderItems.  # noqa: E501
        :type: bool
        """

        self._physical_item = physical_item

    @property
    def cube(self):
        """Gets the cube of this ImportOrderItems.  # noqa: E501


        :return: The cube of this ImportOrderItems.  # noqa: E501
        :rtype: float
        """
        return self._cube

    @cube.setter
    def cube(self, cube):
        """Sets the cube of this ImportOrderItems.


        :param cube: The cube of this ImportOrderItems.  # noqa: E501
        :type: float
        """

        self._cube = cube

    @property
    def weight(self):
        """Gets the weight of this ImportOrderItems.  # noqa: E501


        :return: The weight of this ImportOrderItems.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ImportOrderItems.


        :param weight: The weight of this ImportOrderItems.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def length(self):
        """Gets the length of this ImportOrderItems.  # noqa: E501


        :return: The length of this ImportOrderItems.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ImportOrderItems.


        :param length: The length of this ImportOrderItems.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def height(self):
        """Gets the height of this ImportOrderItems.  # noqa: E501


        :return: The height of this ImportOrderItems.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ImportOrderItems.


        :param height: The height of this ImportOrderItems.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this ImportOrderItems.  # noqa: E501


        :return: The width of this ImportOrderItems.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ImportOrderItems.


        :param width: The width of this ImportOrderItems.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def item_note(self):
        """Gets the item_note of this ImportOrderItems.  # noqa: E501


        :return: The item_note of this ImportOrderItems.  # noqa: E501
        :rtype: str
        """
        return self._item_note

    @item_note.setter
    def item_note(self, item_note):
        """Sets the item_note of this ImportOrderItems.


        :param item_note: The item_note of this ImportOrderItems.  # noqa: E501
        :type: str
        """

        self._item_note = item_note

    @property
    def location_code(self):
        """Gets the location_code of this ImportOrderItems.  # noqa: E501


        :return: The location_code of this ImportOrderItems.  # noqa: E501
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this ImportOrderItems.


        :param location_code: The location_code of this ImportOrderItems.  # noqa: E501
        :type: str
        """

        self._location_code = location_code

    @property
    def skill_level(self):
        """Gets the skill_level of this ImportOrderItems.  # noqa: E501


        :return: The skill_level of this ImportOrderItems.  # noqa: E501
        :rtype: float
        """
        return self._skill_level

    @skill_level.setter
    def skill_level(self, skill_level):
        """Sets the skill_level of this ImportOrderItems.


        :param skill_level: The skill_level of this ImportOrderItems.  # noqa: E501
        :type: float
        """

        self._skill_level = skill_level

    @property
    def location(self):
        """Gets the location of this ImportOrderItems.  # noqa: E501


        :return: The location of this ImportOrderItems.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ImportOrderItems.


        :param location: The location of this ImportOrderItems.  # noqa: E501
        :type: str
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportOrderItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportOrderItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
